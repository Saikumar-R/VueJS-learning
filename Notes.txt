Installation
    a. vue CLI - npm install -g @vue/cli
    b. version check - vue --version
    c.updating vue CLI - npm update -g @vue/cli
    d. Creating a project -- vue create hello-world

1. Binding Text
    In Vue we have 2 methods for Binding a Text
    a. Mustache syntax {{}} (dynamic value update) recomended way
    b. decorative Binding 'v-text' (this will write entire value of an html element)

2. Binding Html
    Using 'v-html' Attribute we can bind an html element which is coming from JS

3. Binding to Attribute
    we can bind any html attribute using "v-bind:attribute" decorator
    we can have both static and dynamic classes for an html element.
    we can write conditonal while Binding an attributes by using conditonal operators.
    we can also bind attributes and their respective values using another 2 approaches
        a. Array approach
        b. Object approach

4.Binding inline styling
    we can bind style attribute in "Object" or "Array" syntax using "v-bind:style"

    (note: for provinding shorter syntax we can omit "v-bind" in the syntax and can use only attribute followed by colon " :class='' ")

5. Conditonal Rendering
    In Vue we can conditonally render Html using 4 directives
        a. v-if=""
        b. v-else-if=""
        c. v-else=""
        d. v-show=""

    note: in generall use case we may think v-if and v-show will work in similar way but they were not below points need to be consider.
        a. v-if will render an element in dom only the JS expression which we have passed is true.
        b. v-show will always keeps element in dom and sets inline display:none property to it, and the display property toggle based on our condition.

6. List Rendering
    In vue we can render list of elements using 'v-for' directive. for below senarios you can find same code in this project.
        a. Array of strings
        b. Array of objects
        c. Array of Arrays
        d. Block of HTML elements
        e. object key value pairs.

7. Key Attribute
    Common and recommended way to provide a key attribute while using v-for directive
    Key Attribute helps Vue to identify which item in a list changes,are added or removed and plays a crucial role in handling UI updates correctly and efficently.

8. Conditional List Rendering
    we cannot render a list with condition using v-for and v-if in a same tag.
    instead use v-for for parent element and v-if for the element which need to be render conditionally.

9. Methods
    Methods are Commonly used when handling events
    in vue we can create functions using methods property.
    we cannot use arrow functions

10. Event handling
    in vue we can implement events using "v-on:eventyouwant="respectiveFunctionCall()" 
    (eg: v-on:click="alert('you are hacked')")
    short hand syntax '@eventYouWant="respectiveFunctionCall()"'
    vue automaticaly pass event object as a arugument while event handling.

11. Form handling
    To Capture User events
        a. Inputs
        b.Text areas
        c.single select dropdown control
        d.multi select control
        e.checkbox
        f.checkbox group
        g. radio
        h.submit from data
    for handling 2way Binding vue offers "v-model",  way Binding refers to passing data from logic to view and view to logic.

12. Modifiers
    A suffix can add to either v-on or v-model directives to add some functionality inline with in the template.
    Helps yo write cleaner code.
        a.trim (v-model.trim="") this will remove unwanted spaces.
        b. number (v-mode.number="") this will ensure the value will be a number.
        c. lazy (v-model.trim.lazy="") this will bind on the change event instead of input event, this will improve performance because it will not trigger on every key stroke.
        d. prevent (@sumbit.prevent="") this is similar to event.preventDefault();
        e. key ( @keyup.enter="submitForm" ) we will use it when we want to call a method after hitting any key.

    Reference: https://vuejs.org/guide/essentials/event-handling.html#key-modifiers

13. v-once directive
    Renders the corresponding html only once, the element is treated as static content or skipped
    It is not frequently used.

14. v-pre directive
    this directive skip compilation for the corresponding element.

15. Computed Properties
    Properties that can be bound  to the template like data Properties
    they are used for composing data form existing sources
    they are highly performent as they are cached in calculations which only update when their dependencies changes.
    Whenever dependencies changes properties computed

16. Computed properties v/s Methods
    Method will always call when there is a change in UI, but Computed properties only call when there is a change in opration or values since it is cached.

17. Computed Properties and Conditional Rendering (v-for).
    I have array of objects and I want to filter out the item price which is greater than 100, to solve this problem I have 2 approaches
        a. we can render list of items using v-for and using v-if condition we can print the value.
        b. using computed property we can implement JS filter and there using v-for we can output the expected values (available in code).

18. Computed Setter
    we can use get and set using computed functions

19. Watchers
    Watchers allows you to watch any data or computed property and execute some code in responce to change in value
    watchers are mostly Commonly used when we have to call an API in response to change in application.
    When we want to apply transitions.

20. Immediate and deep Watchers
    we you are calling an api or a property and it should call by default, we can achieve achive this by passing a property "Immediate:true"
    watcher will not watch in deep when we are dealing with objects so we need to pass "deep:true"

21. Components
    Vue follows component based archtecture
    We can breakdown or webpage into small parts and implement code in the respective Components
    A component contains 3 parts 
        a. template
        b. script
        c. style
    components are reusable and can be nested inside another components.
    when we are createing new component we need to make sure it should be register with APP.vue file.

22. Component Props
    Components are reusable, we can create any component that returns html and include in any part of application where ever we want.
    Props are custom attributes we can register on a component which allow the component content will be dynamic.
    To retrive the value in the component 
        1. Specify an option called props in the default export is an array of all data properties or custom attribute that component can accept from parent component.
        2. Grab the value in the html where ever your calling the component

23. Prop Types and Validations
    vue allows us to specify props as an object instead as an array.
    Props allows us to send data from parent to child component.
    In the object syntax key is the prop name and value is the prop type.
    Make sure to use v-bind directive if your are passing non string values, if not you will be landed into console warnings.
     1.string
     2.number
     3.boolean
     4.Array
     5.object
     6.function
     7.Date

24. Non Prop attributes
    Non prop attribute is an attribute that is passed to a component ,but does not have corresponding property defined in props option. ex: Id, class, style.

    if we add non prop attributes where we call the component, automaticaly these non prop attribute will apply to parent node.

    if you want to apply non prop attributes for different elements instead of root node we need to use v-bind="$attrs" and to disable non prop attributes apply to root element include "inheritAttrs: flase" in exports block.

25. Provide and Inject
    These are 2 powerfull Api's in Vue.
    These two API's provide a way to pass data through component tree without having to pass down props manually at every level.
    Steps to pass data from one component to another
     1. Provide the value in the component 
     2. inject the value 

26. Component events
    By Using props we can pass data from parent componet to child componet, in some cases we may need to pass data from Child to Parents components there we need to follow "Custom Component Events"
    Steps:
        1. Specify Emits options in the child component and emit and event using "$emit" property
        2. Bind the custom event using event binding in the parent component and assign the following method.


27. Validating Emitted Events
    Similar to props we can validate custom events that are emitted from child component.
    refer example "\components\Component-events\Validating-Emitted-events"

28. Components And V-model
    in many cases we create a form componet and use many places in our application (ex:well styled input element) in such scenarios we need to add some logic to ensure v-model directive works as expected.
    we need to add props and :value="modelValue" @input="$emit('update:modelValue',$event.target.value)
    refer "\components\Components-and-V-model.vue"

29. Slots
    1. Props allow us to reuse components by passing different data
    2. Props are great for reusability, we do have strict parent-child relationship.
    3.The child values will always be in control of the HTML content and parent can only pass different data values but not HTML.
    4.Solts on other hand are more powerfull, They allows us to reuse a componet, They allows the parent componet to control the content inside child component, by using slots we can embed any content in a child component including html elements.
    refer "\components\Slots"

30. Named Slots
    Sometimes we find it useful multiple slots by doing so we have some predefined structure in child component but the content within the predefined structure will be controlled from parent componet by doing so we can utilise the component in multiple places.
    refer "\components\Slots\Named-Slots.vue"

31. Slots Props
    in some cases we need Parent component to Control how child component will render the content.
    Here in code we are controlling names list rendering style from parent component which was initated in child component.
    to achieve this, we need to follow below Steps
        1. Provide Slot tag in the child comp (Slot-Props.vue)
        2. Pass the parameter Name as data to parent comp (parentComp.vue) to achieve this we need to use slot props syntax.

32. Component Styling
    1. Global Styling: 
        a.By default a component styles are applied globally in the component tree (If we include the styles in Parent or child component that will be applied to both parent or child components as well if their selctors got match).
        b. if we selectors got matched were we have seperated styles inside each component, and if we have different styles in parent component for same selectors ultimately the styles in elder parents will be applied since those will take priority in the tree.

    2. Scope Styling:
        a. Scoped Attribute ensures a component's CSS will apply only to its own HTML elements* (if we want to apply specific styles only for a component and those shouldn't be overwritten by parent comp styles, we need to add "scoped" keyword to the style tag of the component.
        b. with scoped the parent component styles will not leak into child components. However, a child component root node will be effected by both the parents scoped CSS and the child's scoped CSS.This is by design so that the parent can style the child root element layout purposes.

    3. Styling with Slots:
        When using slots, the parent components styles are applied and not the child component styles even though the content is embedded inside the child component.

33. Dynamic Components
    In a web application we may deal with tabs, when a user click on tab we need to render respective data related to that component.
    we need to use vue specified <component :is=""/> to achive dynamic components.
    Note: This will work based on the Component names which we have mentioned in exports.
    refer "\components\Dynamic-Components"

34. Keeping Dynamic Components Alive
    When ever vue render a component it will erase the other components data which was not in use. take below scenario for example.
     -- when we have 3 tabs in the third tab were user wants to fill some form and the form should not be reset or erace if he switch between other tabs--
    To Achive the above scenario VUE provide a special tag <keep-alive>
    we need to wrap our dynamic components inside keep-alive to achieve this.

35. Teleport Component
    which is used to move elements from one place to another.

